(set-info :origin "benchmarks generated by liquid types http://goto.ucsd.edu/~rjhala/liquid/")
(set-logic HORN)
(assert (forall ((tmp_main__SSA__blk_1_1 Int)
         (__cil_tmp5_main Int)
         (x__csolve_heapify___main__SSA__blk_0_1 Int)
         (i_main__SSA__blk_1_1 Int)
         (BLOCK_END (Array Int Int))
         (BLOCK_BEGIN (Array Int Int))
         (UNCHECKED (Array Int Int)))
  (let ((a!1 (and (not (<= 0 i_main__SSA__blk_1_1))
                  (= __cil_tmp5_main (ite (< i_main__SSA__blk_1_1 10) 1 0))
                  (= i_main__SSA__blk_1_1 tmp_main__SSA__blk_1_1)
                  (>= tmp_main__SSA__blk_1_1 1)
                  (= (select BLOCK_END x__csolve_heapify___main__SSA__blk_0_1)
                     (+ x__csolve_heapify___main__SSA__blk_0_1 40))
                  (= x__csolve_heapify___main__SSA__blk_0_1
                     (select BLOCK_BEGIN x__csolve_heapify___main__SSA__blk_0_1))
                  (> x__csolve_heapify___main__SSA__blk_0_1 0)
                  (not (= __cil_tmp5_main 0))
                  true)))
    (=> a!1 false))))
(assert (forall ((VV Int)
         (__cil_tmp5_main Int)
         (__cil_tmp6_main Int)
         (i_main__SSA__blk_1_1 Int)
         (tmp_main__SSA__blk_1_1 Int)
         (x__csolve_heapify___main__SSA__blk_0_1 Int)
         (BLOCK_END (Array Int Int))
         (BLOCK_BEGIN (Array Int Int))
         (UNCHECKED (Array Int Int)))
  (let ((a!1 (or (= (select UNCHECKED VV) 1)
                 (and (<= (select BLOCK_BEGIN VV) VV)
                      (< VV (select BLOCK_END VV))
                      true)
                 false)))
  (let ((a!2 (and (not a!1)
                  (= __cil_tmp5_main (ite (< i_main__SSA__blk_1_1 10) 1 0))
                  (= (select BLOCK_END __cil_tmp6_main)
                     (select BLOCK_END x__csolve_heapify___main__SSA__blk_0_1))
                  (= (select BLOCK_BEGIN __cil_tmp6_main)
                     (select BLOCK_BEGIN x__csolve_heapify___main__SSA__blk_0_1))
                  (= (select UNCHECKED __cil_tmp6_main)
                     (select UNCHECKED x__csolve_heapify___main__SSA__blk_0_1))
                  (= __cil_tmp6_main
                     (+ x__csolve_heapify___main__SSA__blk_0_1
                        (* 4 i_main__SSA__blk_1_1)))
                  (<= x__csolve_heapify___main__SSA__blk_0_1 __cil_tmp6_main)
                  (= i_main__SSA__blk_1_1 tmp_main__SSA__blk_1_1)
                  (>= tmp_main__SSA__blk_1_1 1)
                  (= (select BLOCK_END x__csolve_heapify___main__SSA__blk_0_1)
                     (+ x__csolve_heapify___main__SSA__blk_0_1 40))
                  (= x__csolve_heapify___main__SSA__blk_0_1
                     (select BLOCK_BEGIN x__csolve_heapify___main__SSA__blk_0_1))
                  (> x__csolve_heapify___main__SSA__blk_0_1 0)
                  (not (= __cil_tmp5_main 0))
                  (< VV (+ __cil_tmp6_main 4))
                  (<= __cil_tmp6_main VV)
                  (= (select UNCHECKED VV) (select UNCHECKED __cil_tmp6_main))
                  (= (select BLOCK_END VV) (select BLOCK_END __cil_tmp6_main))
                  (= (select BLOCK_BEGIN VV)
                     (select BLOCK_BEGIN __cil_tmp6_main))
                  true)))
    (=> a!2 false)))))
(assert (forall ((VV Int)
         (BLOCK_END (Array Int Int))
         (BLOCK_BEGIN (Array Int Int))
         (UNCHECKED (Array Int Int)))
  (=> (and (not (>= VV 0)) (= VV 40) true) false)))

(check-sat)
