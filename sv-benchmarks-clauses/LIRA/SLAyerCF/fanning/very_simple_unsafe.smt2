(set-info :origin "benchmarks generated from SLAYer trace refinement by Jael Kriener")
(set-logic HORN)
(declare-fun transition
             (Real Real Real Real Real Real Bool Bool Real Real)
             Bool)
(declare-fun transition (Real Real Real Real Bool) Bool)
(declare-fun transition (Real Real Real Real Real Bool Real) Bool)
(assert (forall ((?A Real) (?B Real) (?C Real) )(=> (transition 2.0 ?C ?B ?A false) (transition 1.0 ?C ?B ?A false)))
)
(assert (forall ((?A Real) (?B Real) (?C Real) (?D Real) (?E Real) )(=> (transition 2.0 ?E ?D ?C ?B false ?A) (transition 1.0 ?E ?D ?C ?B false ?A)))
)
(assert (forall ((?A Real) (?B Real) (?C Real) (?D Real) (?E Real) (?F Bool) (?G Real) (?H Real) )(=> (transition 2.0 ?H ?G ?E ?D ?C false ?F ?B ?A) (transition 1.0 ?H ?G ?E ?D ?C false ?F ?B ?A)))
)
(assert (forall ((?A Real) (?B Real) )(transition 2.0 ?B 1.0 ?A false))
)
(assert (forall ((?A Real) (?B Real) (?C Real) (?D Real) )(=> (= ?A (- 1.0)) (transition 2.0 ?D 1.0 ?C ?B false ?A)))
)
(assert (forall ((?A Real) (?B Real) (?C Real) (?D Real) (?E Real) (?F Real) )(let (($x4188 (transition 2.0 ?F 1.0 ?E ?D ?C false false ?B ?A)))
(=> (and (= ?A (- 1.0)) (= ?B (- 1.0))) $x4188)))
)
(assert (forall ((?A Real) (?B Real) (?C Real) (?D Real) )(=> (transition 1.0 ?D ?B ?A false) (transition 0.0 ?C ?B ?A false)))
)
(assert (forall ((?A Real) (?B Real) (?C Real) (?D Real) (?E Real) (?F Real) )(=> (transition 1.0 ?F ?D ?C ?B false ?A) (transition 0.0 ?E ?D ?C ?B false ?A)))
)
(assert (forall ((?A Real) (?B Real) (?C Real) (?D Real) (?E Real) (?F Bool) (?G Real) (?H Real) (?I Real) )(let (($x14068 (and (transition 1.0 ?I ?G ?E ?D ?C false ?F ?B ?A) (or (not (= ?E 1.0)) (not ?F)))))
(=> $x14068 (transition 0.0 ?H ?G ?E ?D ?C false ?F ?B ?A))))
)
(assert (not (exists ((nondet1 Real)
              (front Real)
              (prog_var_0-x Real)
              (heap1_01 Real)
              (objsize1_01 Real))
       (transition 0.0 nondet1 front prog_var_0-x heap1_01 false objsize1_01))))
(check-sat)
