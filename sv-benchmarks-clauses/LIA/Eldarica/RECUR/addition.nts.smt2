(set-info :origin "NTS benchmark converted to SMT-LIB2 using Eldarica (http://lara.epfl.ch/w/eldarica)")
(set-logic HORN)
(declare-fun main_q2 (Int Int Int Int Int Int) Bool)
(declare-fun main_qf () Bool)
(declare-fun main_q0 (Int Int Int Int Int Int) Bool)
(declare-fun main_q1 (Int Int Int Int Int Int) Bool)
(declare-fun addition_q3 (Int Int Int Int Int Int) Bool)
(declare-fun addition_q2 (Int Int Int Int Int Int) Bool)
(declare-fun addition_q0 (Int Int Int Int Int Int) Bool)
(declare-fun addition_q1 (Int Int Int Int Int Int) Bool)
(assert(forall((?A Int)(?B Int)(?C Int)(?D Int)(?E Int)(?F Int))(=>(and (main_q2 ?A ?B ?C ?D ?E ?F)(= ?D (+ ?F ?E))) main_qf)))
(assert(not (exists((?A Int)(?B Int)(?C Int)(?D Int)(?E Int)(?F Int))(and (main_q2 ?A ?B ?C ?D ?E ?F)(not (= ?D (+ ?F ?E)))))))
(assert(forall((?A Int)(?B Int)(?C Int)(?D Int)(?E Int)(?F Int)(?G Int)(?H Int)(?I Int))(=>(and (main_q0 ?A ?B ?C ?G ?H ?I)(and (>= ?F 0) (>= ?E 0))) (main_q1 ?A ?B ?C ?D ?E ?F))))
(assert(forall((?A Int)(?B Int)(?C Int)(?D Int)(?E Int)(?F Int))(=>(and (and (= ?A ?D) (= ?B ?E)) (= ?C ?F)) (main_q0 ?A ?B ?C ?D ?E ?F))))
(assert(forall((?A Int)(?B Int)(?C Int)(?D Int)(?E Int)(?F Int)(?G Int)(?H Int)(?I Int))(=>(and (addition_q2 ?A ?C ?B ?G ?H ?I)(and (= ?D ?I) (and (= ?H ?F) (= ?I ?E)))) (addition_q3 ?A ?B ?C ?D ?E ?F))))
(assert(forall((?A Int)(?B Int)(?C Int)(?D Int)(?E Int)(?F Int)(?G Int)(?H Int)(?I Int))(=>(and (addition_q0 ?A ?B ?C ?G ?H ?I)(and (= ?H 0) (and (and (= ?G ?D) (= ?H ?E)) (= ?I ?F)))) (addition_q2 ?A ?B ?C ?D ?E ?F))))
(assert(forall((?A Int)(?B Int)(?C Int)(?D Int)(?E Int)(?F Int)(?G Int)(?H Int)(?I Int))(=>(and (addition_q0 ?A ?B ?C ?G ?H ?I)(and (not (= ?H 0)) (and (and (= ?G ?D) (= ?H ?E)) (= ?I ?F)))) (addition_q1 ?A ?B ?C ?D ?E ?F))))
(assert(forall((?A Int)(?B Int)(?C Int)(?D Int)(?E Int)(?F Int)(?G Int)(?H Int)(?I Int)(?J Int)(?K Int)(?L Int)(?M Int)(?N Int)(?O Int))(=>(and (and (and (and (addition_q1 ?A ?C ?B ?G ?H ?I)(and (= ?J (+ ?I 1)) (= ?K (- ?H 1))))(addition_q3 ?L ?J ?K ?M ?N ?O))(= ?M ?D))(and (= ?H ?F) (= ?I ?E))) (addition_q3 ?A ?B ?C ?D ?E ?F))))
(assert(forall((?A Int)(?B Int)(?C Int)(?D Int)(?E Int)(?F Int)(?G Int)(?H Int)(?I Int)(?J Int)(?K Int)(?L Int))(=>(and (and (addition_q1 ?G ?H ?I ?J ?K ?L)(and (= ?C (+ ?L 1)) (= ?B (- ?K 1))))(and (and (= ?A ?D) (= ?C ?F)) (= ?B ?E))) (addition_q0 ?A ?B ?C ?D ?E ?F))))
(assert(forall((?A Int)(?B Int)(?C Int)(?D Int)(?E Int)(?F Int)(?G Int)(?H Int)(?I Int)(?J Int)(?K Int)(?L Int)(?M Int)(?N Int)(?O Int))(=>(and (and (and (and (main_q1 ?A ?B ?C ?G ?H ?I)(and (= ?J ?I) (= ?K ?H)))(addition_q3 ?L ?J ?K ?M ?N ?O))(= ?M ?D))(and (= ?H ?E) (= ?I ?F))) (main_q2 ?A ?B ?C ?D ?E ?F))))
(assert(forall((?A Int)(?B Int)(?C Int)(?D Int)(?E Int)(?F Int)(?G Int)(?H Int)(?I Int)(?J Int)(?K Int)(?L Int))(=>(and (and (main_q1 ?G ?H ?I ?J ?K ?L)(and (= ?C ?L) (= ?B ?K)))(and (and (= ?A ?D) (= ?C ?F)) (= ?B ?E))) (addition_q0 ?A ?B ?C ?D ?E ?F))))
(check-sat)
